ixml version "1.1".

{ xs.ixml:  grammar for sentential logic }
xs-formulas = os, formula++NL, os.
{ XS Formulas in general }
formula = basic-formula | compound-formula.
-compound-formula = not | and | or | implies | iff.
{ Compound formulas }
    not = NOT, (not | basic-formula).
    and = (and | basic-formula), AND, (basic-formula | not).
     or = (or  | basic-formula),  OR, (basic-formula | not).
implies = basic-formula, IMPLIES, (basic-formula | not).
    iff = basic-formula, IFF, (basic-formula | not).
{ XS Basic formulas }
-basic-formula = prop-var | prop-constant 
               | -"(", os, -formula, os, -")"
               | -"[", os, -formula, os, -"]".

{ XS Atomics:  propositional variables and constants }
prop-var = @name.
prop-constant = quoted-name; quoted-string.
-quoted-name = -#27, @name, -#27 
               { #27 is typewriter apostrophe }
             | -#60, @name, -#27 
               { #60 is typewriter grave accent }
             | -#2018, @name, -#2019 
               { hi 6, hi 9 }
             | -#203A, @name, -#2039 
               { single guillemets pointing in }
             | -#2039, @name, -#203A 
               { single guillemets pointing out }
             .
@quoted-string
      > string = -#22, (~[#22; #A]; (#22, #22))*, -#22
               | -#60, -#60, ~[#22; #60; #A]*, -#27, -#27 
               | -#60, -#60, ~[#22; #60; #A]*, -#22 
               | -#201C, ~[#201C; #201D; #A]*, -#201D
               | -#AB, ~[#AB; #BB; #A]*, -#BB
               | -#BB, ~[#AB; #BB; #A]*, -#AB
               .

{ Logical operators }
@NOT > op = NOT-sym, os
          | NOT-alpha, RS
          .
NOT-alpha = "not" | "NOT".
  NOT-sym = "¬" { #AC not sign }
          | "-"
          | "—" { #2014 em dash }
          | "~" { #7E tilde }
          | "⁓" { #2053 swung dash }
          . 

@AND > op = os, AND-sym, os
          | RS, AND-alpha, RS
          .
AND-alpha = "and" | "AND"
          | "\land" | "\and" 
          | "\wedge"
          .
  AND-sym = "∧" { #2227 }
          | "&"
          | "&&"
          | "/\" { emacs here wants a " }
          .

 @OR > op = os, OR-sym, os
          | RS, OR-alpha, RS
          .
 OR-alpha = "or" | "OR" 
          | "vel" | "VEL" 
          | "\lor" | "\or" | "\vee"
          .
   OR-sym = "∨" { #2228 logical or }
          | "|" 
          | "||"
          | "\/"
          . 
@IMPLIES > op = os, IMPLIES-sym, os
              | RS, IMPLIES-alpha, RS. 
IMPLIES-alpha = "implies" | "IMPLIES" 
              | "only", os, "if" 
              | "ONLY", os, "IF"
              .
  IMPLIES-sym = "⇒" { #21D2 right double arrow } 
              | "⊃" { #2283 superset of }
              | "→" { #2192 right arrow }
              | "->"
              | "=>"
              .

@IFF > op = os, IFF-sym, os
          | RS, IFF-alpha, RS.
IFF-alpha = "iff" | "IFF"; "\equiv".
  IFF-sym = "⇔" { #21D4 left right double arrow }
          | "↔" { #2194 left right arrow }
          | "≡" { #2261 identical to }
          | "<->"
          | "<=>"
          .


{ Basics:  names, whitespace, comments }
name = letter, namechar*.
-letter = [L].
-namechar = letter; digit; ["-_"].
-digit = [Nd].
-whitespace = -[Zs; #9; #A; #D].
-RS = (whitespace; comment)+.
-os = (whitespace; comment)*.
{ NL for required line breaks }
-NL = (-[Zs; #9] | comment)*, #A, os.
      comment = -"/*", comment-data, -"*/".
-comment-data = ("*"+, ~["/*"] 
                | "/"*, (comment | ~["/*"]))*, 
                "*"*.

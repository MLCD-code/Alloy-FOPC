#+title: Short experiment with answer substitution in E
#+author: CMSMcQ 
#+date: 30 March 2024

I want to do a little experiment with the theorem prover E.

* E can provide answer substitutions

The usage notes say it can perform "answer substitutions", which from
the example appears to be more or less what Prolog does when providing
an answer to a user query.

#+begin_quote
Starting with version 1.3, E is able to provide answer
substitutions. It currently adheres to the Tuple version of the TPTP
proposal for answer extraction. To use this feature, you need to
specify an existentially quantified conjecture formula with the
formula type question, as in the example below. This implies the use
of the TPTP-3/TSTP syntax.
#+end_quote
#+begin_src tptp :tangle ../examples/phil01.p
      fof(socrates,axiom,(philosopher(socrates))).
      fof(plato,axiom,(philosopher(plato))).      
      fof(hume,axiom,(philosopher(hume))).
      fof(philosphers_exist,question,(?[X]:(philosopher(X)))).
#+end_src
  
#+begin_quote
By default, E will stop searching after the first answer. The
~--answers~ option can be used to specify for how many answers E will
keep searching : ~eprover --answers=2 ans_test01.p~
#+end_quote

Consulting Spivey I see that the term /answer substitution/ is one I
should recognize: it's not more or less but precisely what Prolog
does.

As a baseline, what happens if we submit the example given above to
/E/?  Here is the command:

#+name: run_phil01
#+begin_src sh :results output verbatim :exports both
/opt/local/bin/eprover --auto --answers=2 --output-level=0 ../examples/phil01.p
#+end_src

#+RESULTS: run_phil01
#+begin_example
# No SInE strategy applied
# Auto-Mode selected heuristic G_E___208_C18_F1_SE_CS_SP_PS_S5PRR_RG_S04AN
# and selection function SelectComplexExceptUniqMaxHorn.
#
# Presaturation interreduction done
# SZS status Theorem
# SZS answers Tuple [[hume]|_]
# SZS answers Tuple [[plato]|_]

# Proof found!
#+end_example

`


* Are answer substitutions what we need?

However, our situation appears to be a little different when we wish
to find an instance of a model, or perhaps I should say a possible
world which obeys a set of constraints, or to check that a given
instance is in fact compatible with the model.

We don't normally expect that it will follow from the constraints of a
definition of /tree/ that three individuals of class Object exist,
arranged such that the child_parent relation links two of them to the
third.  Nor will it follow that no such individuals can exist.  (If it
does follow that they cannot exist, then the example we are checking
is clearly incompatible with the axioms.)

For simplicity, I'll assume that any example we are interested in
consists of some set of individuals of which certain sentences are
true; on this view, any example can be concisely described as a
predicate in Alloy, and if the example is compatible with the
constraints in the Alloy model, then in some possible world the
sentence (some x, y, ..., z)(P(x, y, ..., z)) will hold.

Since many theorem provers work by negating the demonstrandum,
conjoining it to some set of premises, and then proving the
inconsistency of the resulting set of sentences, it's clear that
checking a set of sentences for consistency or inconsistency is in
priciple within their power.  My difficulty is finding a simple and
reliable way to formulate a problem for which the theorem prover's
solution will tell me whether the set of sentences it started with is
consistent or not.  The obvious problem is that since first-order
logic is only semi-decidable, what I want is not always feasible.

But would it be possible to formulate a problem for which a theorem
prover will terminate in most or all simple cases?

* A concrete case:  if Socrates exists, Socrates is a philosopher

Suppose, for example, that our axioms were not that Socrates, Plato,
and Hume exist and are philosophers, but but that if Socrates, Plato,
and Hume exist, then they will be philosophers?

#+begin_src tptp :noweb-ref philosophers
  fof(soc, axiom, (![X]: (is_socrates(X) => philosopher(X)))).
  fof(pla, axiom, (![X]: (is_plato(X) => philosopher(X)))).
  fof(hum, axiom, (![X]: (is_hume(X) => philosopher(X)))).
#+end_src

Unless I am mistaken, a state of affairs in which some individual /x/
satisfies the predicates /is_socrates(x)/ and /philosopher(x)/ is
possible but not necessary.  So we won't be able to prove either that
the following conjecture is true, nor that it's false.
#+begin_src tptp :tangle ../examples/phil02.p :noweb tangle
  <<philosophers>>
  fof(philosophers_exist,question,(?[X]:(philosopher(X)))).
#+end_src

If we hand this problem to /E/ what do we get?

#+name: run_phil02
#+begin_src sh :results output verbatim :exports results
/opt/local/bin/eprover --auto \
                       --answers=2 \
                       --output-level=0 \
                       ../examples/phil02.p \
                       ; echo -n
#                      The 'echo -n' is needed because 
#                      otherwise the non-zero return code
#                      confuses org-mode.
#+end_src

#+RESULTS: run_phil02
: # No SInE strategy applied
: # Auto-Mode selected heuristic G_E___208_C18_F1_SE_CS_SP_PS_S5PRR_RG_S04AN
: # and selection function SelectComplexExceptUniqMaxHorn.
: #
: # Presaturation interreduction done
: 
: # No proof found!
: # SZS status CounterSatisfiable

For what it's worth, negating the question produces (as we should
expect) the same result.  Here is the negation:

#+begin_src tptp :tangle ../examples/phil03.p :noweb tangle
  <<philosophers>>
  fof(philosophers_exist,question,(~ ?[X]:(philosopher(X)))).
#+end_src

And here is the result:

#+name: run_phil03
#+begin_src sh :results output verbatim :exports results
/opt/local/bin/eprover --auto --output-level=0 \
                       ../examples/phil03.p; echo -n
#+end_src

#+RESULTS: run_phil03
: # No SInE strategy applied
: # Auto-Mode selected heuristic G_E___208_C18_F1_SE_CS_SP_PS_S5PRR_RG_S04AN
: # and selection function SelectComplexExceptUniqMaxHorn.
: #
: # Presaturation interreduction done
: 
: # No proof found!
: # SZS status CounterSatisfiable

The remark "SZS status CounterSatisfiable" seems promising, at least.
I should look more carefully at the documentation.

But before I do that, perhaps we can exploit the idea that any
contradiction licenses arbitrary conclusions?  (Yes, but the tasks
assigned in that case to the prover are guaranteed to terminate only
if the example violates the constraints.  We want some task that will
terminate if it /conforms/ to the constraints.)

The manual does not mention a mode of operation that amounts to asking
"is this set of propositions consistent?" -- or possibly it does so
using words I did not recognize as having that meaning.

What happens if I hand it a set of axioms without any conjecture or
question?  That is, what if I add the example (here:  there exists a
philosopher) not as a question but as an axiom?

Answer:  we get a very similar result.

#+begin_src tptp :tangle ../examples/phil04.p :noweb tangle
  <<philosophers>>
  fof(philosophers_exist,axiom,(?[X]:(philosopher(X)))).
#+end_src

#+name: run_phil04
#+begin_src sh :results output verbatim :exports none
/opt/local/bin/eprover --auto --output-level=0 \
                       ../examples/phil04.p; echo -n
#+end_src

#+RESULTS: run_phil04
: # No SInE strategy applied
: # Auto-Mode selected heuristic G_E___208_C18_F1_SE_CS_SP_PS_S5PRR_RG_S04AN
: # and selection function SelectComplexExceptUniqMaxHorn.
: #
: # Presaturation interreduction done
: 
: # No proof found!
: # SZS status Satisfiable

The message "No proof found!" appears again -- a bit confusing since
there was nothing to prove.  And the SZS status is "Satisfiable" and
not "CounterSatisfiable".

Perhaps this tells us that when the input contains a list of axioms
with no conjecture or question, /E/ does precisely what I was looking
for (or at least: one of the things I am looking for): it checks the
axioms for satisfiability.

If we add an inconsistent axiom to the set, what will /E/ do?

#+name: run_phil04x
#+begin_src sh :results output verbatim :exports both
(cat ../examples/phil04.p \
   ; echo "fof(contradiction, axiom, (p & ~ p)).") \
   | /opt/local/bin/eprover --auto --output-level=0 \
   ; echo $?
#+end_src

#+RESULTS: run_phil04x
: # No SInE strategy applied
: # Auto-Mode selected heuristic G_E___208_C18_F1_SE_CS_SP_PS_S5PRR_RG_S04AN
: # and selection function SelectComplexExceptUniqMaxHorn.
: #
: # Presaturation interreduction done
: 
: # Proof found!
: # SZS status Unsatisfiable
: 0

Further consideration of what it says in the manual suggests also that
/E/ makes a helpful three-way distinction in its results:
- "Proof found!" means the input (including any negated conjecture)
  was found to be inconsistent / non-satisfiable.
- "Proof not found!" means the input (including any negated conjecture)
  was found to be satisfiable.
- "Failure: ..." means that the result was indeterminate, because
  some resource limit or other was exceeded.

That means that in some cases, at least, we will have the terminating
behavior we hoped for, with an affirmative statement that a particular
example is consistent with the constraints.

Why does the documentation not say that more directly and explicitly?
I can think of some possible reasons, not mutually exclusive:

- Perhaps checking a set of sentences for consistency is not /that/
  common a requirement.
- Perhaps it is so blindingly obvious to most users of /E/ that it
  does not occur to anyone that it needs saying at all.
- Perhaps the documentation does say this already, in a way that
  is clear to other readers even if it did not seem clear to me.

* Conclusions

It appears (I am still feeling a bit tentative) that:

- A set of sentences (e.g. the formulas capturing some set of
  constraints) can be checked for consistency by submitting the set to
  /E/, without the need to manufacture and append a conjecture to be
  proved or disproved.

- That means that a possible state of affairs S can be checked for
  consistency with a set of sentences or axioms A by just adding a
  description of S as an additional sentence.  If S is consistent with
  A, /E/ will report "SZS Status Satisfiable"; if S is not consistent
  with A, then /E/ will report "SZS Status Unsatisfiable".

  Or, possibly, it may run out of resources before reaching a result.

- If it is a necessary consequence of the axioms that some
  individual(s) exist who collectively satisfy some state of affairs
  S, then a conjecture to that effect, formulated as an existential
  quantification and labeled a "question" in the input, will lead E to
  propose (as an answer substitution) one or more sets of individuals
  who instantiate S.

- If, on the other hand, S is compatible with A but not entailed by A
  -- that is, if S is contingent, not necessary -- then the answer
  substitution facility in /E/ will not propose possible individuals.

  Perhaps this can be summarized as: /E/ will propose answer
  substitutions which will make the existential statement true in
  every model of the theory; it will not propose answer substitutions
  that will satisfy the statement in some but not all models.

- I think that means that I do not know a way to use /E/ to find
  instances of a theory in the style of Alloy.

  But it does seem that in cases where Alloy fails to find an instance
  and reports that the model may be contradictory, /E/ may be able to
  prove as a theorem that it is contradictory.

